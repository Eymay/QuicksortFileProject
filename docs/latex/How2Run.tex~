\subsection{How2Run}
In order to successfully run, the executable of main.cpp and books.csv must be in the same directory. 
Commands that can be run are:
\begin{itemize}
\item g++ -g main.cpp
\item ./a.out
\end{itemize}
sorted\_books.csv will be created if the input file is present and thus the sorting is correct. If the sorting is wrong the output file will not be created. 
\subsection{Performance Analysis}

The performance analysis includes gprof for profiling and gprof2dot for the visualisations. Gprof counts how many times each function is run by putting print statements around the functions. In order to use gprof, -pg flag must be given during compile time. When the executable is run a gmon.out file is created which gprof reads and creates a flat profile and a call graph in text. Gprof2dot takes text input and creates images of call graphs with execution information. 

In the first run of my analysis, I realised that the parser was taking 50\% of the execution time. The reason for that as it can be seen at Figure \ref{malloc}, is the vector.push\_back function utilised the malloc() for vector significantly. As the input gets larger it created a growing overhead. To solve it I reserved the maximum expected size at the beginning and in the end of parsing made it shrink\_to\_fit() to not allocate more than necessary memory. 

\begin{figure}[H]
\begin{center}
\label{malloc}
\leavevmode
\includegraphics[width=350pt]{1sttry.png}
\end{center}
\end{figure}


In my first iteration of the code, to see that the algorithm is working, the parsed vector was directly accessed and sorted by using string to float (stoa) function extensively. This caused an overhead as the complexity of the sorting algorithm got reflected in stoa() function as well which can be observed at Figure \ref{stoa}.
\begin{figure}[H]
\begin{center}
\label{stoa}
\leavevmode
\includegraphics[width=350pt]{output_o2optimised.png}
\caption{O2 optimised and compiled by g++}
\end{center}
\end{figure}

To remove the stoa() overhead, the reading of average rating number and the sorting of vectors must have been decoupled from the reading of the parsed vector. To achieve the decoupling two arrays of integers were considered. The unsorted\_values\[\] array included the essence of the read file. At every index i similar to row is the integer rating number. The read operation and comparison is performed on this array with the index provided from the proceeding array which holds the indices. The stof() operation is done once per row in this way in the extractor() function.
To accomodate swap operations another array, sorted\_keys\[\], holding the indices of the unsorted\_values array is created. Initially Arr\[i\] = i as they are unsorted. To perform swap, two index values residing in sorted\_keys array is swapped.  
To ensure the new index based sorting system is safe, a new class with these arrays is declared and made a global object. The class has a getValue() and swap operation. Sorting functions do not access the arrays directly. 

After making these changes the parser() function is still taking 100\% execution time as it can be seen at Figure \ref{parser}. After investigating, the problem came out to be that push\_back function had a direct argument making it do unnecessary copy operations where instead std::move would make the operation more direct. After making the changes the execution time of parser() fell into a reasonable percentage as in Figure \ref{parserfix} and Figure \ref{parserfix_clang}.  


\begin{figure}[H]
\begin{center}
\label{parser}
\leavevmode
\includegraphics[width=0.5\textwidth]{output_o3optimised3_crop_parser.png}
\caption{O3 optimised and compiled by g++}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\label{parserfix}
\leavevmode
\includegraphics[width=0.5\textwidth]{output_o3optimised5.png}
\caption{O3 optimised and compiled by g++}
\end{center}
\end{figure}
\begin{figure}[H]
\begin{center}
\label{parserfix_clang}
\leavevmode
\includegraphics[width=0.5\textwidth]{output_clango3optimised6.png}
\caption{O3 optimised and compiled by clang++}
\end{center}
\end{figure}
The optimisations made by the compilers play a critical role at the performance of various parts of the code. Parser is optimised heavily in clang but not in gcc and they output different execution percentages. Apart from parser() the compiler also tries to optimize quicksort() function. In clang it is possible to view several optimizations made by the compiler on high level code with a tool named opt-viewer. In order to use it, -fsave-optimization-record -foptimization-record-file arguments should be given to clang. A yaml file containing optimisations will be generated. Opt-viewer can use the yaml file and generate html files. The opt-viewer is written in Python and it is in the llvm repository.


\begin{figure}[H]
\begin{center}
\label{part_opt}
\leavevmode
\includegraphics[width=0.5\textwidth]{partition_optviewer.png}
\caption{Optimisations of Clang provided by Opt-Viewer}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\label{qs_opt}
\leavevmode
\includegraphics[width=0.5\textwidth]{quicksort_optviewer.png}
\caption{Optimisations of Clang provided by Opt-Viewer}
\end{center}
\end{figure}
The optimisations of Clang in the partition() function can be viewed at Figure \ref{part_opt} which are minimal. The optimisations on quicksort() can be seen at Figure \ref{qs_opt} which includes tail call elimination. 

The function call statistics are present in gprof but to have the statistics embedded in the code several counter variables are added and printed after the counting is finished. The time difference between entering the quicksort() is also printed. The time taken by quicksort is varying so the screenshots include 5 samples of the time difference. 


\begin{figure}[H]
\begin{center}
\label{qs_max}
\leavevmode
\includegraphics[width=0.5\textwidth]{qsmax.png}
\caption{Duration time of quicksort execution and function counts with 100\% input }
\end{center}
\end{figure}
\begin{figure}[H]
\begin{center}
\label{qs_half}
\leavevmode
\includegraphics[width=0.5\textwidth]{qshalf.png}
\caption{Duration time of quicksort execution and function counts with 50\% input }
\end{center}
\end{figure}
\begin{figure}[H]
\begin{center}
\label{qs_quarter}
\leavevmode
\includegraphics[width=0.5\textwidth]{qsquarter.png}
\caption{Duration time of quicksort execution and function counts with 25\% input }
\end{center}
\end{figure}
\begin{figure}[H]
\begin{center}
\label{qs_qhalf}
\leavevmode
\includegraphics[width=0.5\textwidth]{qsquarterhalf.png}
\caption{Duration time of quicksort execution and function counts with 12\% input }
\end{center}
\end{figure}
